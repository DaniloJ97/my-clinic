/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme.zakazanipregledi;

import domen.Karton;
import domen.Lekar;
import domen.MedicinskaSestra;
import domen.ZakazaniPregled;
import forme.FormMode;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import kontroler.Kontroler;
import transfer.ServerskiOdgovor;
import util.ResponseStatus;
import validacija.OpstaValidacija;

/**
 *
 * @author Danilo
 */
public class ZakazivanjePregledaForma extends javax.swing.JDialog {
    private SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy. HH:mm");
    private FormMode formMode;
    private ZakazaniPregled zp;

    /**
     * Creates new form ZakazivanjePregledaForma
     */
    public ZakazivanjePregledaForma(java.awt.Frame parent, boolean modal, FormMode formMode, ZakazaniPregled zp) {
        super(parent, modal);
        initComponents();
        this.formMode=formMode;
        this.zp=zp;
        centriraj();
        postaviNepromenljivostDimenzija();
        ucitajListuKartona();
        ucitajListuLekara();
        srediFormu();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelZakazivanje = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbPacijenti = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        cbLekari = new javax.swing.JComboBox();
        txtDatumIVremeZakazanogPregleda = new javax.swing.JTextField();
        btnZakaziPregled = new javax.swing.JButton();
        btnIzmeniZakazaniPregled = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Zakaži pregled");

        panelZakazivanje.setBorder(javax.swing.BorderFactory.createTitledBorder("Zakazivanje pregleda"));

        jLabel1.setText("Datum i vreme zakazanog pregleda:");

        jLabel2.setText("Pacijent:");

        cbPacijenti.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Lekar:");

        cbLekari.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout panelZakazivanjeLayout = new javax.swing.GroupLayout(panelZakazivanje);
        panelZakazivanje.setLayout(panelZakazivanjeLayout);
        panelZakazivanjeLayout.setHorizontalGroup(
            panelZakazivanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelZakazivanjeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelZakazivanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelZakazivanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbPacijenti, 0, 226, Short.MAX_VALUE)
                    .addComponent(cbLekari, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtDatumIVremeZakazanogPregleda))
                .addContainerGap())
        );
        panelZakazivanjeLayout.setVerticalGroup(
            panelZakazivanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelZakazivanjeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelZakazivanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbPacijenti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelZakazivanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbLekari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelZakazivanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDatumIVremeZakazanogPregleda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        btnZakaziPregled.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnZakaziPregled.setText("Zakaži pregled");
        btnZakaziPregled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZakaziPregledActionPerformed(evt);
            }
        });

        btnIzmeniZakazaniPregled.setText("Izmeni zakazani pregled");
        btnIzmeniZakazaniPregled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniZakazaniPregledActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelZakazivanje, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnIzmeniZakazaniPregled)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnZakaziPregled)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelZakazivanje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnZakaziPregled)
                    .addComponent(btnIzmeniZakazaniPregled))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnZakaziPregledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZakaziPregledActionPerformed
        izvrsiOperaciju();
        
    }//GEN-LAST:event_btnZakaziPregledActionPerformed

    private void btnIzmeniZakazaniPregledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniZakazaniPregledActionPerformed
        izvrsiOperaciju();
    }//GEN-LAST:event_btnIzmeniZakazaniPregledActionPerformed

    /**
     * @param args the command line arguments
     */
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzmeniZakazaniPregled;
    private javax.swing.JButton btnZakaziPregled;
    private javax.swing.JComboBox cbLekari;
    private javax.swing.JComboBox cbPacijenti;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel panelZakazivanje;
    private javax.swing.JTextField txtDatumIVremeZakazanogPregleda;
    // End of variables declaration//GEN-END:variables

    private void ucitajListuLekara() {
        cbLekari.removeAllItems();
        
        Lekar l = new Lekar();
        
        List<Lekar> lekari = Kontroler.getInstanca().vratiListuLekara(l);
        
        for (Lekar lekar : lekari) {
            cbLekari.addItem(lekar);
        }
    }

    private void ucitajListuKartona() {
        cbPacijenti.removeAllItems();
        
        Karton k = new Karton();
        
        List<Karton> kartoni = Kontroler.getInstanca().vratiListuKartona(k);
        
        for (Karton karton : kartoni) {
            cbPacijenti.addItem(karton);
        }
    }

    private void centriraj() {
        setLocationRelativeTo(null);
    }

    private void postaviNepromenljivostDimenzija() {
        setResizable(false);
    }

    private void ocistiFormu() {
        txtDatumIVremeZakazanogPregleda.setText("");
        cbLekari.setSelectedItem(cbLekari.getItemAt(0));
        cbPacijenti.setSelectedItem(cbPacijenti.getItemAt(0));
    }

    private void srediFormu() {
        if(formMode.equals(FormMode.FORM_ADD)){
           setTitle("Zakaži pregled");
           Border border = BorderFactory.createTitledBorder("Zakazivanje pregleda");
           panelZakazivanje.setBorder(border);
           btnIzmeniZakazaniPregled.setVisible(false);
           txtDatumIVremeZakazanogPregleda.setEditable(true);
        }
        if(formMode.equals(FormMode.FORM_VIEW)){
           setTitle("Prikaži zakazani pregled");
           Border border = BorderFactory.createTitledBorder("Prikaz zakazanog pregleda"); 
           panelZakazivanje.setBorder(border);
           izvuciPodatke();
           cbLekari.setMaximumRowCount(1);
           cbPacijenti.setMaximumRowCount(1);
           zabraniIzmene();
        }
        if(formMode.equals(FormMode.FORM_UPDATE)){
           setTitle("Izmeni zakazani pregled");
           Border border = BorderFactory.createTitledBorder("Izmena zakazanog pregleda");
           panelZakazivanje.setBorder(border);
           izvuciPodatke();
           btnZakaziPregled.setVisible(false);
           btnIzmeniZakazaniPregled.setVisible(true);
        }
    }

    private void izvuciPodatke() {
        cbLekari.setSelectedItem(zp.getLekar());
        cbPacijenti.setSelectedItem(zp.getKarton());
        txtDatumIVremeZakazanogPregleda.setText(sdf.format(zp.getDatumZakazanogPregleda()));
    }

    private void zabraniIzmene() {
        txtDatumIVremeZakazanogPregleda.setEditable(false);
        btnIzmeniZakazaniPregled.setVisible(false);
        btnZakaziPregled.setVisible(false);   
    
    }

    private void izvrsiOperaciju() {
        Karton karton = (Karton) cbPacijenti.getSelectedItem();
        Lekar lekar = (Lekar) cbLekari.getSelectedItem();
        
        String datumString = txtDatumIVremeZakazanogPregleda.getText();
        if(!OpstaValidacija.getInstanca().daLiSuPoljaPopunjena(txtDatumIVremeZakazanogPregleda)){
            JOptionPane.showMessageDialog(null, OpstaValidacija.getInstanca().getPoruka(),"Greška",JOptionPane.ERROR_MESSAGE);
            return;
        }
        Date datum =null;
        try {
            datum = sdf.parse(datumString);
            if(datum.before(new Date())){
                JOptionPane.showMessageDialog(this, "Datum mora biti u budućnost!","Greška",JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Datum i vreme zakazanog pregleda moraju biti u formatu dd.MM.yyyy. HH:mm");
            Logger.getLogger(ZakazivanjePregledaForma.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        
        MedicinskaSestra m = (MedicinskaSestra) Kontroler.getInstanca().getUlogovani();
                
        if(formMode.equals(FormMode.FORM_ADD)){
        ZakazaniPregled zp = new ZakazaniPregled(new Long(-1), datum, m, null, karton, lekar);
        ServerskiOdgovor so = Kontroler.getInstanca().zakaziPregled(zp);
        if(so.getResponseStatus()==ResponseStatus.ERROR){
            JOptionPane.showMessageDialog(null, so.getPoruka(),"Greška",JOptionPane.ERROR_MESSAGE);
        }
        else{
            JOptionPane.showMessageDialog(null, so.getPoruka(),"Uspešno zakazivanje",JOptionPane.INFORMATION_MESSAGE);
            ocistiFormu();
        }
        }
        if(formMode.equals(FormMode.FORM_UPDATE)){
            zp.setDatumZakazanogPregleda(datum);
            zp.setKarton(karton);
            zp.setLekar(lekar);
            zp.setMedicinskaSestra(m);
            
            ServerskiOdgovor odgovor = Kontroler.getInstanca().izmeniZakazaniPregled(zp);
            if(odgovor.getResponseStatus()==ResponseStatus.ERROR){
                JOptionPane.showMessageDialog(this, odgovor.getPoruka(), "Greška",JOptionPane.ERROR_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(this, odgovor.getPoruka(), "Poruka",JOptionPane.INFORMATION_MESSAGE);
                PretragaZakazanihPregledaForma pzf = (PretragaZakazanihPregledaForma) getParent();
                pzf.pretraga();
                this.dispose();                
            }
        }
    }
}
